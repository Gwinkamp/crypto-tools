package normalizer_test

import (
	"testing"

	"github.com/Gwinkamp/crypto-tools/certificates/normalizer"
	"github.com/stretchr/testify/require"
)

func TestNormalizeCertBody(t *testing.T) {
	t.Helper()

	steps := []struct {
		name     string
		certBody string
		expected string
	}{
		{
			name:     "standard cert",
			certBody: "MIIINjCCB+OgAwIBAgIRA/yJywDlsI+JQhDqFYhNKqIwCgYIKoUDBwEBAwIwggEPMRgwFgYFKoUDZAESDTEwMjQwMDE0MzQwNDkxGjAYBggqhQMDgQMBARIMMDA0MDI5MDE3OTgxMQswCQYDVQQGEwJSVTEeMBwGA1UECAwVNDAg0JrQsNC70YPQttGB0LrQsNGPMRkwFwYDVQQHDBDQsy4g0JrQsNC70YPQs9CwMSwwKgYDVQQJDCPQv9C10YAuINCi0LXRgNC10L3QuNC90YHQutC40Lkg0LQuNjEnMCUGA1UECgwe0JDQniDQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCbMTgwNgYDVQQDDC/QotC10YHRgtC+0LLRi9C5INCQ0J4g0JrQkNCb0KPQk9CQINCQ0KHQotCg0JDQmzAeFw0yMzEyMjcxMjExMDRaFw0yNTAzMjcxMjIxMDRaMIIB6DEsMCoGA1UECQwj0LHRg9C7LiDQmtC+0LzQvNGD0L3QsNGA0L7Qsiwg0LQuIDMxFTATBgUqhQNkBBIKOTYwNDE0MTQwMjElMCMGCSqGSIb3DQEJARYWYXZlcmtpMjAxM0BleGFtcGxlLm5ldDEYMBYGBSqFA2QBEg0xMjMyMzg1Njc4MjE2MRYwFAYFKoUDZAMSCzU5NjUyNzAyMTMwMRowGAYIKoUDA4EDAQESDDk2NzEwNzE1Nzk1NTEXMBUGA1UEDAwO0KHQvNC10YLRh9C40LoxLDAqBgNVBCoMI9Cj0LvRjNGP0L0g0KXQsNGA0LvQsNC80L/RjNC10LLQuNGHMRUwEwYDVQQEDAzQm9GL0YLQutC40L0xCzAJBgNVBAYTAlJVMSEwHwYDVQQIDBjQotGD0LvRjNGB0LrQsNGPINC+0LHQuy4xGjAYBgNVBAcMEdC60LvRhSDQktC40YLQuNC8MUAwPgYDVQQKDDdf0YLQtdGB0YJf0JfQuNC90L7QstGM0LXQstCwINCY0L3QutC+0YDQv9C+0YDRjdC50YLQtdC0MUAwPgYDVQQDDDdf0YLQtdGB0YJf0JfQuNC90L7QstGM0LXQstCwINCY0L3QutC+0YDQv9C+0YDRjdC50YLQtdC0MGYwHwYIKoUDBwEBAQEwEwYHKoUDAgIkAAYIKoUDBwEBAgIDQwAEQET38SyjBmiy/Av1v2CXCSfydE0QxquHHPO33/lilVnVvvhACcDS6DoDg/sRtMZIr8si8zYsfA2JAY2Rfct0ZOqjggQ0MIIEMDAOBgNVHQ8BAf8EBAMCA/gwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMB0GA1UdIAQWMBQwCAYGKoUDZHEBMAgGBiqFA2RxAjAsBgUqhQNkbwQjDCHQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/RgNC+IENTUCIwDAYFKoUDZHIEAwIBADAnBgkrBgEEAYI3FQoEGjAYMAoGCCsGAQUFBwMCMAoGCCsGAQUFBwMEMFEGCCsGAQUFBwEBBEUwQzBBBggrBgEFBQcwAoY1aHR0cDovL3JlZ3NlcnZpY2Uua2V5ZGlzay5ydS90ZXN0Y2Evcm9vdC90ZXN0Y2ExNC5jcnQwHwYJKwYBBAGCNxUHBBIwEAYIKoUDAgIuAAgCAQECAQAwggFKBgUqhQNkcASCAT8wggE7DFPQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/QoNCeIENTUCIgKNCy0LXRgNGB0LjRjyA0LjApICjQuNGB0L/QvtC70L3QtdC90LjQtSAyIC1CYXNlKQyBkdCf0YDQvtCz0YDQsNC80LzQvdC+LdCw0L/Qv9Cw0YDQsNGC0L3Ri9C5INC60L7QvNC/0LvQtdC60YEgItCj0LTQvtGB0YLQvtCy0LXRgNGP0Y7RidC40Lkg0YbQtdC90YLRgCAi0JrRgNC40L/RgtC+0J/RgNC+INCj0KYiINCy0LXRgNGB0LjQuNC4IDIuMCIMIdCh0KQvMTI0LTMzODAg0L7RgiAxMSDQvNCw0Y8gMjAxOAwt0KHQpC8xMjgtMzU5MiDQvtGCIDE3INC+0LrRgtGP0LHRgNGPIDIwMTgg0LMuMEUGA1UdHwQ+MDwwOqA4oDaGNGh0dHA6Ly9yZWdzZXJ2aWNlLmtleWRpc2sucnUvdGVzdGNhL2NybC90ZXN0Y2ExNC5jcmwwggFRBgNVHSMEggFIMIIBRIAUpj0AMSKZmFHMR0wojqbLq/LpVXehggEXpIIBEzCCAQ8xGDAWBgUqhQNkARINMTAyNDAwMTQzNDA0OTEaMBgGCCqFAwOBAwEBEgwwMDQwMjkwMTc5ODExCzAJBgNVBAYTAlJVMR4wHAYDVQQIDBU0MCDQmtCw0LvRg9C20YHQutCw0Y8xGTAXBgNVBAcMENCzLiDQmtCw0LvRg9Cz0LAxLDAqBgNVBAkMI9C/0LXRgC4g0KLQtdGA0LXQvdC40L3RgdC60LjQuSDQtC42MScwJQYDVQQKDB7QkNCeINCa0JDQm9Cj0JPQkCDQkNCh0KLQoNCQ0JsxODA2BgNVBAMML9Ci0LXRgdGC0L7QstGL0Lkg0JDQniDQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCbghEDdHPZAJKwI7NIWK+XHJVuqTAdBgNVHQ4EFgQU9zwdcT6dPXl41YDAcOiVoQx0mFIwCgYIKoUDBwEBAwIDQQB5CFHUyCGMtMiGRvoQJLxxnIiqCOfglwht1MTfr9EaDJmSbWmEX5lhASxufTaPUul05wHTFH0gK6EJYkVpHAw0",
			expected: `-----BEGIN CERTIFICATE-----
MIIINjCCB+OgAwIBAgIRA/yJywDlsI+JQhDqFYhNKqIwCgYIKoUDBwEBAwIwggEPM
RgwFgYFKoUDZAESDTEwMjQwMDE0MzQwNDkxGjAYBggqhQMDgQMBARIMMDA0MDI5MD
E3OTgxMQswCQYDVQQGEwJSVTEeMBwGA1UECAwVNDAg0JrQsNC70YPQttGB0LrQsNG
PMRkwFwYDVQQHDBDQsy4g0JrQsNC70YPQs9CwMSwwKgYDVQQJDCPQv9C10YAuINCi
0LXRgNC10L3QuNC90YHQutC40Lkg0LQuNjEnMCUGA1UECgwe0JDQniDQmtCQ0JvQo
9CT0JAg0JDQodCi0KDQkNCbMTgwNgYDVQQDDC/QotC10YHRgtC+0LLRi9C5INCQ0J
4g0JrQkNCb0KPQk9CQINCQ0KHQotCg0JDQmzAeFw0yMzEyMjcxMjExMDRaFw0yNTA
zMjcxMjIxMDRaMIIB6DEsMCoGA1UECQwj0LHRg9C7LiDQmtC+0LzQvNGD0L3QsNGA
0L7Qsiwg0LQuIDMxFTATBgUqhQNkBBIKOTYwNDE0MTQwMjElMCMGCSqGSIb3DQEJA
RYWYXZlcmtpMjAxM0BleGFtcGxlLm5ldDEYMBYGBSqFA2QBEg0xMjMyMzg1Njc4Mj
E2MRYwFAYFKoUDZAMSCzU5NjUyNzAyMTMwMRowGAYIKoUDA4EDAQESDDk2NzEwNzE
1Nzk1NTEXMBUGA1UEDAwO0KHQvNC10YLRh9C40LoxLDAqBgNVBCoMI9Cj0LvRjNGP
0L0g0KXQsNGA0LvQsNC80L/RjNC10LLQuNGHMRUwEwYDVQQEDAzQm9GL0YLQutC40
L0xCzAJBgNVBAYTAlJVMSEwHwYDVQQIDBjQotGD0LvRjNGB0LrQsNGPINC+0LHQuy
4xGjAYBgNVBAcMEdC60LvRhSDQktC40YLQuNC8MUAwPgYDVQQKDDdf0YLQtdGB0YJ
f0JfQuNC90L7QstGM0LXQstCwINCY0L3QutC+0YDQv9C+0YDRjdC50YLQtdC0MUAw
PgYDVQQDDDdf0YLQtdGB0YJf0JfQuNC90L7QstGM0LXQstCwINCY0L3QutC+0YDQv
9C+0YDRjdC50YLQtdC0MGYwHwYIKoUDBwEBAQEwEwYHKoUDAgIkAAYIKoUDBwEBAg
IDQwAEQET38SyjBmiy/Av1v2CXCSfydE0QxquHHPO33/lilVnVvvhACcDS6DoDg/s
RtMZIr8si8zYsfA2JAY2Rfct0ZOqjggQ0MIIEMDAOBgNVHQ8BAf8EBAMCA/gwHQYD
VR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMB0GA1UdIAQWMBQwCAYGKoUDZHEBM
AgGBiqFA2RxAjAsBgUqhQNkbwQjDCHQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/RgN
C+IENTUCIwDAYFKoUDZHIEAwIBADAnBgkrBgEEAYI3FQoEGjAYMAoGCCsGAQUFBwM
CMAoGCCsGAQUFBwMEMFEGCCsGAQUFBwEBBEUwQzBBBggrBgEFBQcwAoY1aHR0cDov
L3JlZ3NlcnZpY2Uua2V5ZGlzay5ydS90ZXN0Y2Evcm9vdC90ZXN0Y2ExNC5jcnQwH
wYJKwYBBAGCNxUHBBIwEAYIKoUDAgIuAAgCAQECAQAwggFKBgUqhQNkcASCAT8wgg
E7DFPQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/QoNCeIENTUCIgKNCy0LXRgNGB0Lj
RjyA0LjApICjQuNGB0L/QvtC70L3QtdC90LjQtSAyIC1CYXNlKQyBkdCf0YDQvtCz
0YDQsNC80LzQvdC+LdCw0L/Qv9Cw0YDQsNGC0L3Ri9C5INC60L7QvNC/0LvQtdC60
YEgItCj0LTQvtGB0YLQvtCy0LXRgNGP0Y7RidC40Lkg0YbQtdC90YLRgCAi0JrRgN
C40L/RgtC+0J/RgNC+INCj0KYiINCy0LXRgNGB0LjQuNC4IDIuMCIMIdCh0KQvMTI
0LTMzODAg0L7RgiAxMSDQvNCw0Y8gMjAxOAwt0KHQpC8xMjgtMzU5MiDQvtGCIDE3
INC+0LrRgtGP0LHRgNGPIDIwMTgg0LMuMEUGA1UdHwQ+MDwwOqA4oDaGNGh0dHA6L
y9yZWdzZXJ2aWNlLmtleWRpc2sucnUvdGVzdGNhL2NybC90ZXN0Y2ExNC5jcmwwgg
FRBgNVHSMEggFIMIIBRIAUpj0AMSKZmFHMR0wojqbLq/LpVXehggEXpIIBEzCCAQ8
xGDAWBgUqhQNkARINMTAyNDAwMTQzNDA0OTEaMBgGCCqFAwOBAwEBEgwwMDQwMjkw
MTc5ODExCzAJBgNVBAYTAlJVMR4wHAYDVQQIDBU0MCDQmtCw0LvRg9C20YHQutCw0
Y8xGTAXBgNVBAcMENCzLiDQmtCw0LvRg9Cz0LAxLDAqBgNVBAkMI9C/0LXRgC4g0K
LQtdGA0LXQvdC40L3RgdC60LjQuSDQtC42MScwJQYDVQQKDB7QkNCeINCa0JDQm9C
j0JPQkCDQkNCh0KLQoNCQ0JsxODA2BgNVBAMML9Ci0LXRgdGC0L7QstGL0Lkg0JDQ
niDQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCbghEDdHPZAJKwI7NIWK+XHJVuqTAdB
gNVHQ4EFgQU9zwdcT6dPXl41YDAcOiVoQx0mFIwCgYIKoUDBwEBAwIDQQB5CFHUyC
GMtMiGRvoQJLxxnIiqCOfglwht1MTfr9EaDJmSbWmEX5lhASxufTaPUul05wHTFH0
gK6EJYkVpHAw0
-----END CERTIFICATE-----`,
		},
		{
			name:     "cert with length is a multiple of 65",
			certBody: "MIIIIzCCB9CgAwIBAgIRA347hQDDsB+WT/9A6aQ9ERMwCgYIKoUDBwEBAwIwggEPMRgwFgYFKoUDZAESDTEwMjQwMDE0MzQwNDkxGjAYBggqhQMDgQMBARIMMDA0MDI5MDE3OTgxMQswCQYDVQQGEwJSVTEeMBwGA1UECAwVNDAg0JrQsNC70YPQttGB0LrQsNGPMRkwFwYDVQQHDBDQsy4g0JrQsNC70YPQs9CwMSwwKgYDVQQJDCPQv9C10YAuINCi0LXRgNC10L3QuNC90YHQutC40Lkg0LQuNjEnMCUGA1UECgwe0JDQniDQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCbMTgwNgYDVQQDDC/QotC10YHRgtC+0LLRi9C5INCQ0J4g0JrQkNCb0KPQk9CQINCQ0KHQotCg0JDQmzAeFw0yMzExMjMwNzU1MDVaFw0yNTAyMjMwODA1MDVaMIIB1TEwMC4GA1UECQwn0LHRg9C7LiDQr9GA0L7RgdC70LDQstGB0LrQuNC5LCDQtC4gNC85MRUwEwYFKoUDZAQSCjk2MTQ1MDk0ODQxJjAkBgkqhkiG9w0BCQEWF2RlbWphbl8xOTczQGV4YW1wbGUub3JnMRgwFgYFKoUDZAESDTUyMzgxMDc5ODM5MjIxFjAUBgUqhQNkAxILMjU4MDgzNTQ0OTIxGjAYBggqhQMDgQMBARIMOTYzNzQ1ODcxMDMzMRswGQYDVQQMDBLQodC10LrRgNC10YLRh9C40LoxMDAuBgNVBCoMJ9Cg0L7RgdGC0LjRgdC70LDQsiDQkNGA0YLQtdC80YzQtdCy0LjRhzEXMBUGA1UEBAwO0JXRgNC80LDQutC+0LIxCzAJBgNVBAYTAlJVMSYwJAYDVQQIDB3QmtCw0LzRh9Cw0YLRgdC60LjQuSDQutGA0LDQuTEVMBMGA1UEBwwM0LMuINCj0YDQsNC5MS8wLQYDVQQKDCZf0YLQtdGB0YJf0JrRg9GA0LPQsNC90LzQsNGI0LfQsNCy0L7QtDEvMC0GA1UEAwwmX9GC0LXRgdGCX9Ca0YPRgNCz0LDQvdC80LDRiNC30LDQstC+0LQwZjAfBggqhQMHAQEBATATBgcqhQMCAiQABggqhQMHAQECAgNDAARAn4og2b/2E9GZDsMSw78nC7eOYFr7lk3ag5OMlyM2BOBG7zXZci0NsGiVAls9X8RAzNOuJxnDbYJtHD623ez",
			expected: `-----BEGIN CERTIFICATE-----
MIIIIzCCB9CgAwIBAgIRA347hQDDsB+WT/9A6aQ9ERMwCgYIKoUDBwEBAwIwggEPM
RgwFgYFKoUDZAESDTEwMjQwMDE0MzQwNDkxGjAYBggqhQMDgQMBARIMMDA0MDI5MD
E3OTgxMQswCQYDVQQGEwJSVTEeMBwGA1UECAwVNDAg0JrQsNC70YPQttGB0LrQsNG
PMRkwFwYDVQQHDBDQsy4g0JrQsNC70YPQs9CwMSwwKgYDVQQJDCPQv9C10YAuINCi
0LXRgNC10L3QuNC90YHQutC40Lkg0LQuNjEnMCUGA1UECgwe0JDQniDQmtCQ0JvQo
9CT0JAg0JDQodCi0KDQkNCbMTgwNgYDVQQDDC/QotC10YHRgtC+0LLRi9C5INCQ0J
4g0JrQkNCb0KPQk9CQINCQ0KHQotCg0JDQmzAeFw0yMzExMjMwNzU1MDVaFw0yNTA
yMjMwODA1MDVaMIIB1TEwMC4GA1UECQwn0LHRg9C7LiDQr9GA0L7RgdC70LDQstGB
0LrQuNC5LCDQtC4gNC85MRUwEwYFKoUDZAQSCjk2MTQ1MDk0ODQxJjAkBgkqhkiG9
w0BCQEWF2RlbWphbl8xOTczQGV4YW1wbGUub3JnMRgwFgYFKoUDZAESDTUyMzgxMD
c5ODM5MjIxFjAUBgUqhQNkAxILMjU4MDgzNTQ0OTIxGjAYBggqhQMDgQMBARIMOTY
zNzQ1ODcxMDMzMRswGQYDVQQMDBLQodC10LrRgNC10YLRh9C40LoxMDAuBgNVBCoM
J9Cg0L7RgdGC0LjRgdC70LDQsiDQkNGA0YLQtdC80YzQtdCy0LjRhzEXMBUGA1UEB
AwO0JXRgNC80LDQutC+0LIxCzAJBgNVBAYTAlJVMSYwJAYDVQQIDB3QmtCw0LzRh9
Cw0YLRgdC60LjQuSDQutGA0LDQuTEVMBMGA1UEBwwM0LMuINCj0YDQsNC5MS8wLQY
DVQQKDCZf0YLQtdGB0YJf0JrRg9GA0LPQsNC90LzQsNGI0LfQsNCy0L7QtDEvMC0G
A1UEAwwmX9GC0LXRgdGCX9Ca0YPRgNCz0LDQvdC80LDRiNC30LDQstC+0LQwZjAfB
ggqhQMHAQEBATATBgcqhQMCAiQABggqhQMHAQECAgNDAARAn4og2b/2E9GZDsMSw7
8nC7eOYFr7lk3ag5OMlyM2BOBG7zXZci0NsGiVAls9X8RAzNOuJxnDbYJtHD623ez
-----END CERTIFICATE-----`,
		},
		{
			name:     "empty cert",
			certBody: "",
			expected: "",
		},
		{
			name: "already normalized cert",
			certBody: `-----BEGIN CERTIFICATE-----
MIIINjCCB+OgAwIBAgIRA/yJywDlsI+JQhDqFYhNKqIwCgYIKoUDBwEBAwIwggEPM
RgwFgYFKoUDZAESDTEwMjQwMDE0MzQwNDkxGjAYBggqhQMDgQMBARIMMDA0MDI5MD
E3OTgxMQswCQYDVQQGEwJSVTEeMBwGA1UECAwVNDAg0JrQsNC70YPQttGB0LrQsNG
PMRkwFwYDVQQHDBDQsy4g0JrQsNC70YPQs9CwMSwwKgYDVQQJDCPQv9C10YAuINCi
0LXRgNC10L3QuNC90YHQutC40Lkg0LQuNjEnMCUGA1UECgwe0JDQniDQmtCQ0JvQo
9CT0JAg0JDQodCi0KDQkNCbMTgwNgYDVQQDDC/QotC10YHRgtC+0LLRi9C5INCQ0J
4g0JrQkNCb0KPQk9CQINCQ0KHQotCg0JDQmzAeFw0yMzEyMjcxMjExMDRaFw0yNTA
zMjcxMjIxMDRaMIIB6DEsMCoGA1UECQwj0LHRg9C7LiDQmtC+0LzQvNGD0L3QsNGA
0L7Qsiwg0LQuIDMxFTATBgUqhQNkBBIKOTYwNDE0MTQwMjElMCMGCSqGSIb3DQEJA
RYWYXZlcmtpMjAxM0BleGFtcGxlLm5ldDEYMBYGBSqFA2QBEg0xMjMyMzg1Njc4Mj
E2MRYwFAYFKoUDZAMSCzU5NjUyNzAyMTMwMRowGAYIKoUDA4EDAQESDDk2NzEwNzE
1Nzk1NTEXMBUGA1UEDAwO0KHQvNC10YLRh9C40LoxLDAqBgNVBCoMI9Cj0LvRjNGP
0L0g0KXQsNGA0LvQsNC80L/RjNC10LLQuNGHMRUwEwYDVQQEDAzQm9GL0YLQutC40
L0xCzAJBgNVBAYTAlJVMSEwHwYDVQQIDBjQotGD0LvRjNGB0LrQsNGPINC+0LHQuy
4xGjAYBgNVBAcMEdC60LvRhSDQktC40YLQuNC8MUAwPgYDVQQKDDdf0YLQtdGB0YJ
f0JfQuNC90L7QstGM0LXQstCwINCY0L3QutC+0YDQv9C+0YDRjdC50YLQtdC0MUAw
PgYDVQQDDDdf0YLQtdGB0YJf0JfQuNC90L7QstGM0LXQstCwINCY0L3QutC+0YDQv
9C+0YDRjdC50YLQtdC0MGYwHwYIKoUDBwEBAQEwEwYHKoUDAgIkAAYIKoUDBwEBAg
IDQwAEQET38SyjBmiy/Av1v2CXCSfydE0QxquHHPO33/lilVnVvvhACcDS6DoDg/s
RtMZIr8si8zYsfA2JAY2Rfct0ZOqjggQ0MIIEMDAOBgNVHQ8BAf8EBAMCA/gwHQYD
VR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMB0GA1UdIAQWMBQwCAYGKoUDZHEBM
AgGBiqFA2RxAjAsBgUqhQNkbwQjDCHQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/RgN
C+IENTUCIwDAYFKoUDZHIEAwIBADAnBgkrBgEEAYI3FQoEGjAYMAoGCCsGAQUFBwM
CMAoGCCsGAQUFBwMEMFEGCCsGAQUFBwEBBEUwQzBBBggrBgEFBQcwAoY1aHR0cDov
L3JlZ3NlcnZpY2Uua2V5ZGlzay5ydS90ZXN0Y2Evcm9vdC90ZXN0Y2ExNC5jcnQwH
wYJKwYBBAGCNxUHBBIwEAYIKoUDAgIuAAgCAQECAQAwggFKBgUqhQNkcASCAT8wgg
E7DFPQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/QoNCeIENTUCIgKNCy0LXRgNGB0Lj
RjyA0LjApICjQuNGB0L/QvtC70L3QtdC90LjQtSAyIC1CYXNlKQyBkdCf0YDQvtCz
0YDQsNC80LzQvdC+LdCw0L/Qv9Cw0YDQsNGC0L3Ri9C5INC60L7QvNC/0LvQtdC60
YEgItCj0LTQvtGB0YLQvtCy0LXRgNGP0Y7RidC40Lkg0YbQtdC90YLRgCAi0JrRgN
C40L/RgtC+0J/RgNC+INCj0KYiINCy0LXRgNGB0LjQuNC4IDIuMCIMIdCh0KQvMTI
0LTMzODAg0L7RgiAxMSDQvNCw0Y8gMjAxOAwt0KHQpC8xMjgtMzU5MiDQvtGCIDE3
INC+0LrRgtGP0LHRgNGPIDIwMTgg0LMuMEUGA1UdHwQ+MDwwOqA4oDaGNGh0dHA6L
y9yZWdzZXJ2aWNlLmtleWRpc2sucnUvdGVzdGNhL2NybC90ZXN0Y2ExNC5jcmwwgg
FRBgNVHSMEggFIMIIBRIAUpj0AMSKZmFHMR0wojqbLq/LpVXehggEXpIIBEzCCAQ8
xGDAWBgUqhQNkARINMTAyNDAwMTQzNDA0OTEaMBgGCCqFAwOBAwEBEgwwMDQwMjkw
MTc5ODExCzAJBgNVBAYTAlJVMR4wHAYDVQQIDBU0MCDQmtCw0LvRg9C20YHQutCw0
Y8xGTAXBgNVBAcMENCzLiDQmtCw0LvRg9Cz0LAxLDAqBgNVBAkMI9C/0LXRgC4g0K
LQtdGA0LXQvdC40L3RgdC60LjQuSDQtC42MScwJQYDVQQKDB7QkNCeINCa0JDQm9C
j0JPQkCDQkNCh0KLQoNCQ0JsxODA2BgNVBAMML9Ci0LXRgdGC0L7QstGL0Lkg0JDQ
niDQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCbghEDdHPZAJKwI7NIWK+XHJVuqTAdB
gNVHQ4EFgQU9zwdcT6dPXl41YDAcOiVoQx0mFIwCgYIKoUDBwEBAwIDQQB5CFHUyC
GMtMiGRvoQJLxxnIiqCOfglwht1MTfr9EaDJmSbWmEX5lhASxufTaPUul05wHTFH0
gK6EJYkVpHAw0
-----END CERTIFICATE-----`,
			expected: `-----BEGIN CERTIFICATE-----
MIIINjCCB+OgAwIBAgIRA/yJywDlsI+JQhDqFYhNKqIwCgYIKoUDBwEBAwIwggEPM
RgwFgYFKoUDZAESDTEwMjQwMDE0MzQwNDkxGjAYBggqhQMDgQMBARIMMDA0MDI5MD
E3OTgxMQswCQYDVQQGEwJSVTEeMBwGA1UECAwVNDAg0JrQsNC70YPQttGB0LrQsNG
PMRkwFwYDVQQHDBDQsy4g0JrQsNC70YPQs9CwMSwwKgYDVQQJDCPQv9C10YAuINCi
0LXRgNC10L3QuNC90YHQutC40Lkg0LQuNjEnMCUGA1UECgwe0JDQniDQmtCQ0JvQo
9CT0JAg0JDQodCi0KDQkNCbMTgwNgYDVQQDDC/QotC10YHRgtC+0LLRi9C5INCQ0J
4g0JrQkNCb0KPQk9CQINCQ0KHQotCg0JDQmzAeFw0yMzEyMjcxMjExMDRaFw0yNTA
zMjcxMjIxMDRaMIIB6DEsMCoGA1UECQwj0LHRg9C7LiDQmtC+0LzQvNGD0L3QsNGA
0L7Qsiwg0LQuIDMxFTATBgUqhQNkBBIKOTYwNDE0MTQwMjElMCMGCSqGSIb3DQEJA
RYWYXZlcmtpMjAxM0BleGFtcGxlLm5ldDEYMBYGBSqFA2QBEg0xMjMyMzg1Njc4Mj
E2MRYwFAYFKoUDZAMSCzU5NjUyNzAyMTMwMRowGAYIKoUDA4EDAQESDDk2NzEwNzE
1Nzk1NTEXMBUGA1UEDAwO0KHQvNC10YLRh9C40LoxLDAqBgNVBCoMI9Cj0LvRjNGP
0L0g0KXQsNGA0LvQsNC80L/RjNC10LLQuNGHMRUwEwYDVQQEDAzQm9GL0YLQutC40
L0xCzAJBgNVBAYTAlJVMSEwHwYDVQQIDBjQotGD0LvRjNGB0LrQsNGPINC+0LHQuy
4xGjAYBgNVBAcMEdC60LvRhSDQktC40YLQuNC8MUAwPgYDVQQKDDdf0YLQtdGB0YJ
f0JfQuNC90L7QstGM0LXQstCwINCY0L3QutC+0YDQv9C+0YDRjdC50YLQtdC0MUAw
PgYDVQQDDDdf0YLQtdGB0YJf0JfQuNC90L7QstGM0LXQstCwINCY0L3QutC+0YDQv
9C+0YDRjdC50YLQtdC0MGYwHwYIKoUDBwEBAQEwEwYHKoUDAgIkAAYIKoUDBwEBAg
IDQwAEQET38SyjBmiy/Av1v2CXCSfydE0QxquHHPO33/lilVnVvvhACcDS6DoDg/s
RtMZIr8si8zYsfA2JAY2Rfct0ZOqjggQ0MIIEMDAOBgNVHQ8BAf8EBAMCA/gwHQYD
VR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMB0GA1UdIAQWMBQwCAYGKoUDZHEBM
AgGBiqFA2RxAjAsBgUqhQNkbwQjDCHQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/RgN
C+IENTUCIwDAYFKoUDZHIEAwIBADAnBgkrBgEEAYI3FQoEGjAYMAoGCCsGAQUFBwM
CMAoGCCsGAQUFBwMEMFEGCCsGAQUFBwEBBEUwQzBBBggrBgEFBQcwAoY1aHR0cDov
L3JlZ3NlcnZpY2Uua2V5ZGlzay5ydS90ZXN0Y2Evcm9vdC90ZXN0Y2ExNC5jcnQwH
wYJKwYBBAGCNxUHBBIwEAYIKoUDAgIuAAgCAQECAQAwggFKBgUqhQNkcASCAT8wgg
E7DFPQodCa0JfQmCAi0JrRgNC40L/RgtC+0J/QoNCeIENTUCIgKNCy0LXRgNGB0Lj
RjyA0LjApICjQuNGB0L/QvtC70L3QtdC90LjQtSAyIC1CYXNlKQyBkdCf0YDQvtCz
0YDQsNC80LzQvdC+LdCw0L/Qv9Cw0YDQsNGC0L3Ri9C5INC60L7QvNC/0LvQtdC60
YEgItCj0LTQvtGB0YLQvtCy0LXRgNGP0Y7RidC40Lkg0YbQtdC90YLRgCAi0JrRgN
C40L/RgtC+0J/RgNC+INCj0KYiINCy0LXRgNGB0LjQuNC4IDIuMCIMIdCh0KQvMTI
0LTMzODAg0L7RgiAxMSDQvNCw0Y8gMjAxOAwt0KHQpC8xMjgtMzU5MiDQvtGCIDE3
INC+0LrRgtGP0LHRgNGPIDIwMTgg0LMuMEUGA1UdHwQ+MDwwOqA4oDaGNGh0dHA6L
y9yZWdzZXJ2aWNlLmtleWRpc2sucnUvdGVzdGNhL2NybC90ZXN0Y2ExNC5jcmwwgg
FRBgNVHSMEggFIMIIBRIAUpj0AMSKZmFHMR0wojqbLq/LpVXehggEXpIIBEzCCAQ8
xGDAWBgUqhQNkARINMTAyNDAwMTQzNDA0OTEaMBgGCCqFAwOBAwEBEgwwMDQwMjkw
MTc5ODExCzAJBgNVBAYTAlJVMR4wHAYDVQQIDBU0MCDQmtCw0LvRg9C20YHQutCw0
Y8xGTAXBgNVBAcMENCzLiDQmtCw0LvRg9Cz0LAxLDAqBgNVBAkMI9C/0LXRgC4g0K
LQtdGA0LXQvdC40L3RgdC60LjQuSDQtC42MScwJQYDVQQKDB7QkNCeINCa0JDQm9C
j0JPQkCDQkNCh0KLQoNCQ0JsxODA2BgNVBAMML9Ci0LXRgdGC0L7QstGL0Lkg0JDQ
niDQmtCQ0JvQo9CT0JAg0JDQodCi0KDQkNCbghEDdHPZAJKwI7NIWK+XHJVuqTAdB
gNVHQ4EFgQU9zwdcT6dPXl41YDAcOiVoQx0mFIwCgYIKoUDBwEBAwIDQQB5CFHUyC
GMtMiGRvoQJLxxnIiqCOfglwht1MTfr9EaDJmSbWmEX5lhASxufTaPUul05wHTFH0
gK6EJYkVpHAw0
-----END CERTIFICATE-----`,
		},
		{
			name:     "empty cert with prefix and postfix",
			certBody: "-----BEGIN CERTIFICATE----------END CERTIFICATE-----",
			expected: "-----BEGIN CERTIFICATE-----\n\n-----END CERTIFICATE-----",
		},
	}

	for _, tc := range steps {
		t.Run(tc.name, func(t *testing.T) {
			result := normalizer.NormalizeCertBody(tc.certBody)

			require.Equal(t, tc.expected, result)
		})
	}

}
